name: "Terraform and Sentinel"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: "Terraform and Sentinel"
    runs-on: ubuntu-latest

    env:
      SENTINEL_VERSION: 0.26.2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Configure git credentials for private module access
      - name: Configure Git Credentials
        run: |
          git config --global url."https://x-access-token:${GH_TOKEN}@github.com/".insteadOf "https://github.com/"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Sentinel
        run: |
          FILENAME="sentinel_${SENTINEL_VERSION}_linux_amd64.zip"
          wget "https://releases.hashicorp.com/sentinel/${SENTINEL_VERSION}/$FILENAME"
          unzip "$FILENAME" -d $HOME/bin
          chmod +x $HOME/bin/sentinel
          echo "$HOME/bin" >> $GITHUB_PATH

      # Initialize Terraform with proper authentication
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: terraform init

      # Step 5: Create Terraform Plan
      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform plan -out=tfplan

      # Step 6: Export Plan as JSON
      - name: Export Terraform Plan
        run: |
          terraform show -json tfplan | jq > ./sentinel-policies/tfplan.json

      # Step 7: Run Sentinel Tests
      - name: Test Sentinel Policies
        id: sentinel_test
        run: |
          cd sentinel-policies
          
          echo "🧪 Running Sentinel unit tests..."
          if sentinel test enforce-policy-consolidated.sentinel; then
            echo "✅ All Sentinel tests passed"
            TEST_RESULT=0
          else
            echo "❌ Sentinel tests failed"
            echo "::error::Sentinel unit tests failed"
            TEST_RESULT=1
          fi
          
          echo "test_status=$TEST_RESULT" >> $GITHUB_OUTPUT

      # Step 8: Apply Sentinel Policies
      - name: Apply Sentinel Policies
        id: sentinel_apply
        if: steps.sentinel_test.outputs.test_status == '0'
        run: |
          cd sentinel-policies
          
          echo "🔍 Evaluating consolidated policy..."
          if sentinel apply -trace enforce-policy-consolidated.sentinel; then
            CONSOLIDATED_RESULT=0
            echo "✅ Consolidated policy passed"
          else
            CONSOLIDATED_RESULT=1
            echo "❌ Consolidated policy failed"
            echo "::error::Consolidated policy check failed"
          fi
          
          if [ $CONSOLIDATED_RESULT -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All policies passed" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=Policy check failed" >> $GITHUB_OUTPUT
          fi

      # Step 9: Process Results
      - name: Take actions based on results
        id: action_results
        run: |
          echo "📊 Checking Sentinel results..."
          
          if [ "${{ steps.sentinel_test.outputs.test_status }}" != "0" ]; then
            echo "❌ Sentinel unit tests failed"
            exit 1
          fi
          
          if [ "${{ steps.sentinel_apply.outputs.status }}" == "success" ]; then
            echo "✅ All checks passed:"
            echo "  - Unit tests: ✅"
            echo "  - Policy validation: ✅"
            echo "Message: ${{ steps.sentinel_apply.outputs.message }}"
          else
            echo "❌ Policy validation failed"
            echo "Message: ${{ steps.sentinel_apply.outputs.message }}"
            exit 1
          fi

      # Step 10: Apply Terraform Changes
      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: |
          github.ref == 'refs/heads/main' && 
          github.event_name == 'push' && 
          steps.sentinel_apply.outputs.status == 'success'
        run: terraform apply -auto-approve tfplan

      # Step 11: Cleanup
      - name: Cleanup
        if: always()
        run: |
          rm -f tfplan
          rm -f ./sentinel/tfplan.json
